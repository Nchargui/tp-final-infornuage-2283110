services:

# tout les services ont le même réseaux pour qu'ils communiquent entre-eux
# tout les services on l'annotation permettant de les restart si ils plantent restart: unless-stopped
# Les requêttes du frontend, portainer et jellyfin son redirigé par Traefik à l'aide d'un nom de domaine

  portainer:
  # image officiel de portainer
    image: portainer/portainer-ce:alpine
    container_name: portainer
    restart: unless-stopped
    networks: 
        - cloud
    # ports:
    #   - 9000:9000
    # gestions de docker et persitance des données
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ## activer traefik, associer nom de domaine, sécurise la connexion (HTTPS)
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.portainer.rule=Host(`portainer.2283110.duckdns.org`)'
      - 'traefik.http.routers.portainer.entryPoints=websecure'
      - "traefik.http.services.frontend.loadbalancer.server.port=9000"
      - "traefik.http.routers.frontend.service=frontend"

  jellyfin:
     # image officiel de jellfin plus récente
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    networks: 
      - cloud
    # ports:
    #   - 8096:8096
    #fuseau horaire
    environment:
      - TZ=America/Montreal
    # gestions des données et partages des films et de séries
    volumes:
      - jellyfin_data:/config
      - /mnt/media/Movies:/movies
      - /mnt/media/TV:/tv
    ## activer traefik, associer nom de domaine, sécurise la connexion (HTTPS)
    labels:
    - 'traefik.enable=true'
    - 'traefik.http.routers.jellyfin.rule=Host(`jellyfin.2283110.duckdns.org`)'
    - 'traefik.http.routers.jellyfin.entryPoints=websecure'

  backend:
    # image de mon image docker du backend et où il peut la reconstruire
    image: nadch4/tp-final-2283110-homebreeze-backend:v3
    build:
      context: ./tp-final-infornuage-2283110-backend
    container_name: backend
    # backend est exposé au port 9696
    ports:
      - "9696:9696"
    
    # si la bd est healty, le container du backend peut se lancer
    depends_on:
      mariadb:
        condition: service_healthy
    # authentification pour la base de données et initialisation du port et url de la bd
    environment:
      - SPRING_APPLICATION_NAME=backend
      - SERVER_PORT=9696
      - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/home_breeze_bd
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=1234
    networks:
      - cloud
 
  mariadb:
    image: mariadb
    container_name: mariadb
    # authentification pour la base de données
    environment:
      - MYSQL_ROOT_PASSWORD=1234
      - MYSQL_DATABASE=home_breeze_bd
    networks:
      - cloud
    ## persitance des données et script sql
    volumes:
      - db:/data/db
      - ./db-seed:/docker-entrypoint-initdb.d
      ## fréquence pour savoir si la bd n'a pas de problème
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 3
 
  frontend:
    # image de mon image docker du frontend et où il peut la reconstruire
    image: nadch4/tp-final-2283110-homebreeze-frontend:v3
    container_name: homebreeze
    build:
      context: ./tp-final-infornuage-2283110-frontend
    # ports:
    #   - "80:80"
    
    # se lance après mon backend
    depends_on:
      - backend
    networks:
      - cloud
    ## activer traefik, associer nom de domaine, sécurise la connexion (HTTPS)
    labels:
    - 'traefik.enable=true'
    - 'traefik.http.routers.homebreeze.rule=Host(`homebreeze.2283110.duckdns.org`)'
    - 'traefik.http.routers.homebreeze.entryPoints=websecure'

  proxy:
      image: traefik
      container_name: traefik
      restart: unless-stopped
      networks: 
          - cloud
      ## logs pour debuging, activation du tableau de bord, détéction des conteneurs docker
      ## besoin de 'traefik.enable=true' pour que les services sois exposé a Traefik
      ## Création de certificat avec let`s encrypt et association du provider à duckDns,
      ## config desdu port entrée http et https, domaine couvert par certificat SSL
      command:
        - "--log.level=DEBUG"
        - "--api.insecure=true"
        - "--providers.docker=true"
        - "--providers.docker.exposedbydefault=false"
        - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
        - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=duckdns"
        - "--certificatesresolvers.letsencrypt.acme.email=mail@mail.com"
        - "--certificatesresolvers.letsencrypt.acme.dnschallenge.disablePropagationCheck=true"
        - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
        - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
        - "--entrypoints.web.address=:80"
        - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
        - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
        - "--entrypoints.websecure.address=:443"
        - "--entrypoints.websecure.http.tls=true"
        - "--entrypoints.websecure.http.tls.certResolver=letsencrypt"
        - "--entrypoints.websecure.http.tls.domains[0].main=2283110.duckdns.org"
        - "--entrypoints.websecure.http.tls.domains[0].sans=*.2283110.duckdns.org"
      ## persistace certificat let`s encrypt et détéction des autres services utilisant reverse proxy
      volumes:
        - "../data/traefik/letsencrypt:/letsencrypt"
        - "/var/run/docker.sock:/var/run/docker.sock:ro"
      labels:
        - 'traefik.enable=true'
        - 'traefik.http.routers.api.rule=Host(`2283110.duckdns.org`)'
        - 'traefik.http.routers.api.entryPoints=websecure'
        - 'traefik.http.routers.api.service=api@internal'
      ports:
        - "443:443"
        - "80:80"
      environment:
        - "DUCKDNS_TOKEN=91190d7c-ed46-46ff-8012-826010772251"
## persitance des données
volumes:
  portainer_data:
  jellyfin_data:
  db:
 
networks:
  cloud:
    driver: bridge
